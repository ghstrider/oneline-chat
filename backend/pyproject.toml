[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "oneline-chat"
version = "0.1.0"
description = "OpenAI-compatible streaming chat API with PostgreSQL persistence"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "Ankush Singh", email = "your.email@example.com" }
]
keywords = ["fastapi", "chat", "ai", "openai", "ollama", "postgresql", "streaming"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: FastAPI",
]

dependencies = [
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "sqlmodel>=0.0.14",
    "psycopg2-binary>=2.9.9",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "openai>=1.35.0",
    "pydantic-ai>=0.7.5",
    "bcrypt>=4.0.1",
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.6",
    "passlib>=1.7.4",
    "email-validator>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "black>=24.1.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
]

test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
]

[project.urls]
Homepage = "https://github.com/ankushsingh/oneline-chat"
Documentation = "https://github.com/ankushsingh/oneline-chat/docs"
Repository = "https://github.com/ankushsingh/oneline-chat"
Issues = "https://github.com/ankushsingh/oneline-chat/issues"

[project.scripts]
oneline-chat = "oneline_chat.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/oneline_chat"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = """
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=oneline_chat
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --maxfail=1
    --asyncio-mode=auto
"""
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "slow: marks tests as slow running",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 100
fix = true
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
]
ignore = [
    "E501",   # Line too long (handled by black)
]
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.isort]
known-first-party = ["oneline_chat"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
show_error_codes = true
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]
exclude = [
    "venv/",
    ".venv/",
    "tests/",
]

[[tool.mypy.overrides]]
module = [
    "uvicorn",
    "testcontainers.*",
]
ignore_missing_imports = true
